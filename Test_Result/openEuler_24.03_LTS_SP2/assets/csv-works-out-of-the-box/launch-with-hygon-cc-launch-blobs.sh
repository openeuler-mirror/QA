#!/bin/bash

# launch-hygon-cc-launch-blobs.sh

DEBUG=${DEBUG:-0}
QEMU_INSTALL_TOP_DIR=${QEMU_INSTALL_TOP_DIR:-""}

if [ ${DEBUG} -eq 1 ]; then
  set -x
fi

# The below 4 blobs are generated by 'generate-hygon-cc-launch-blobs.sh'
readonly godh_cert_basename="guest_owner_dh.cert"
readonly session_basename="launch_blob.bin"
readonly secret_basename="secret.bin.b64"
readonly secret_header_basename="secret_header.bin.b64"

godh_cert_path=""
session_path=""
secret_path=""
secret_header_path=""

kernel_path=""
initrd_path=""
cmdline_path=""
ovmf_path=""
vm_qcow2_path=""
hygon_cctype="csv"
blobtype=""
kernel_hashes_on=0

workspace=""

qemu_img_bin=""
qemu_kvm_bin=""

usage () {
  set +x
  echo -e "\033[31m
Usage: $0 <-h|-f <ovmf-path> -C <hygon-cctype> -k <kernel-path> -i <initrd-path> -c <cmdline-path>
              -B <blobtype> -d <vm-qcow2-path> -K>

       -h,--help         Display this help message
       -f,--ovmf         The path of the guest OVMF
       -C,--cctype       The Hygon Confidential-Computing VM type
                         Valid value are shown as following:
                             csv  (i.e. CSV1 VM)
                             csv1 (i.e. CSV1 VM)
                             csv2 (i.e. CSV2 VM)
                             csv3 (i.e. CSV3 VM)
                         Default is csv
       -k,--kernel       The path of the guest kernel
       -i,--initrd       The path of the guest initrd
       -c,--cmdline      The path of the guest cmdline
       -B,--blobtype     The generated blob type
                         Valid values are as follows:
                             FDE (i.e. Full-Disk-Encryption)
                             Kernel-Hashes
                             Sealing-Key
       -d,--vmqcow2      The path of the VM's qcow2
       -K,--kernelhashes Enable kernel-hashes measure when launching Hygon CC VM
                         For FDE, this is disabled automatically
                         For Kernel-Hashes, this is enabled automatically
                         For Sealing-Key, this will control whether to enable kernel-hashes measure
\033[0m"
  set -x
}

err () {
  echo -e "\033[31m[Error]\033[0m $*"
}

info () {
  echo -e "\033[37m[Info]\033[0m $*"
}

warn () {
  echo -e "\033[33m[Info]\033[0m $*"
}

is_ok () {
  local val=$1

  if [ ${val} -eq 1 ]; then
    echo -ne "\033[32;1m [Ok]\033[0m"
  else
    echo -ne "\033[31;1m [x]\033[0m"
  fi
}

params=$(getopt -o -hf:C:k:i:c:B:d:K --long help,ovmf:,cctype:,kernel:,initrd:,cmdline:,blobtype:,vmqcow2:,kernelhashes -- "$@")
if [ $? -ne 0 ]; then
  err "Cannot parse parameters" ; usage ; exit 1
fi

eval set -- "$params"

while true; do
  case "$1" in
  -h|--help)
    usage ; exit 0
    ;;
  -f|--ovmf)
    ovmf_path="$2"
    shift 2
    ;;
  -C|--cctype)
    hygon_cctype="$2"
    shift 2
    ;;
  -k|--kernel)
    kernel_path="$2"
    shift 2
    ;;
  -i|--initrd)
    initrd_path="$2"
    shift 2
    ;;
  -c|--cmdline)
    cmdline_path="$2"
    shift 2
    ;;
  -B|--blobtype)
    blobtype="$2"
    shift 2
    ;;
  -d|--vmqcow2)
    vm_qcow2_path="$2"
    shift 2
    ;;
  -K|--kernelhashes)
    kernel_hashes_on=1
    shift
    ;;
  --)
    shift
    break
    ;;
  *)
    usage ; exit 1
    ;;
  esac
done


prepare_launch () {
  if [ -z "${QEMU_INSTALL_TOP_DIR}" ]; then
    command -v qemu-img > /dev/null || {
      err "You need provide env var QEMU_INSTALL_TOP_DIR" ; exit 1
    }
    command -v qemu-system-x86_64 > /dev/null || {
      err "You need provide env var QEMU_INSTALL_TOP_DIR" ; exit 1
    }
    qemu_img_bin="$(which qemu-img)"
    qemu_kvm_bin="$(which qemu-system-x86_64)"
  else
    qemu_img_bin="${QEMU_INSTALL_TOP_DIR}/bin/qemu-img"
    qemu_kvm_bin="${QEMU_INSTALL_TOP_DIR}/bin/qemu-system-x86_64"
    command -v ${qemu_img_bin} > /dev/null || {
      err "env var QEMU_INSTALL_TOP_DIR is invalid" ; exit 1
    }
    command -v ${qemu_kvm_bin} > /dev/null || {
      err "env var QEMU_INSTALL_TOP_DIR is invalid" ; exit 1
    }
  fi

  if [ -z "${ovmf_path}" ] ||
     [ ! -e "${ovmf_path}" ]; then
    err "Missing OVMF" ; usage ; exit 1
  fi
  ovmf_path=$(realpath ${ovmf_path})

  if [ -z "${blobtype}" ]; then
    err "Missing BlobType" ; usage ; exit 1
  else
    case "$(echo ${blobtype} | tr '[:upper:]' '[:lower:]')" in
    "fde")
      workspace=Full-Disk-Encryption-workspace
      [ -n "${kernel_path}" ] && {
        warn "Ignore kernel ${kernel_path}"
        kernel_path=""
      }
      [ -n "${initrd_path}" ] && {
        warn "Ignore initrd ${initrd_path}"
        initrd_path=""
      }
      [ -n "${cmdline_path}" ] && {
        warn "Ignore cmdline ${cmdline_path}"
        cmdline_path=""
      }
      warn "Force kernel-hashes off"
      kernel_hashes_on=0
      [ -e "${workspace}/${secret_basename}" ] || {
        err "Missing ${secret_basename}" ; exit 1
      }
      [ -e "${workspace}/${secret_header_basename}" ] || {
        err "Missing ${secret_header_basename}" ; exit 1
      }
      secret_path=$(realpath ${workspace}/${secret_basename})
      secret_header_path=$(realpath ${workspace}/${secret_header_basename})
      ;;
    "kernel-hashes")
      workspace=Kernel-hashes-workspace
      if [ -z "${kernel_path}" ] ||
         [ ! -e "${kernel_path}" ]; then
        err "Missing kernel" ; usage ; exit 1
      fi
      warn "Force kernel-hashes on"
      kernel_hashes_on=1
      ;;
    "sealing-key")
      workspace=Sealing-Key-workspace
      ;;
    *)
      workspace=Generate-launch-blobs-workspace
      ;;
    esac
  fi
  [ -d ${workspace} ] || {
    err "Missing ${workspace}, you should run 'generate-hygon-cc-launch-blobs.sh' in advance"
    exit 1
  }
  [ -e ${workspace}/${godh_cert_basename} ] || {
    err "Missing ${godh_cert_basename}" ; exit 1
  }
  [ -e ${workspace}/${session_basename} ] || {
    err "Missing ${session_basename}" ; exit 1
  }
  godh_cert_path=$(realpath ${workspace}/${godh_cert_basename})
  session_path=$(realpath ${workspace}/${session_basename})

  if [ -n "${kernel_path}" ]; then
    [ -e "${kernel_path}" ] || {
      err "Missing kernel file" ; usage ; exit 1
    }
    kernel_path=$(realpath ${kernel_path})
  fi
  if [ -n "${initrd_path}" ]; then
    [ -e "${initrd_path}" ] || {
      err "Missing initrd file" ; usage ; exit 1
    }
    initrd_path=$(realpath ${initrd_path})
  fi
  if [ -n "${cmdline_path}" ]; then
    [ -e "${cmdline_path}" ] || {
      err "Missing cmdline file" ; usage ; exit 1
    }
    cmdline_path=$(realpath ${cmdline_path})
  fi
  # If kernel_path or initrd_path is null, we should provide VM's disk image
  if [ -z "${kernel_path}" ] ||
     [ -z "${initrd_path}" ]; then
    if [ -z "${vm_qcow2_path}" ] ||
       [ ! -e "${vm_qcow2_path}" ]; then
      err "Missing VM's qcow2" ; usage ; exit 1
    fi
    vm_qcow2_path=$(realpath ${vm_qcow2_path})
  fi
}

prepare_launch

do_launch_vm () {
  cd ${workspace}

  local qemu_ovmf_cmd=""
  local qemu_vm_blk_dev_cmd=""
  local qemu_csv_policy=""
  local qemu_godh_cert=""
  local qemu_session=""
  local qemu_secret=""
  local qemu_secret_header=""
  local qemu_kernel_hashes=""
  local qemu_hygon_cc_cmd=""
  local qemu_kernel_cmd=""
  local qemu_initrd_cmd=""
  local qemu_cmdline_cmd

  qemu_ovmf_cmd="
   -drive if=pflash,format=raw,unit=0,file=${ovmf_path},readonly=on"
  [ -n "${vm_qcow2_path}" ] && {
    qemu_vm_blk_dev_cmd="
   -device virtio-scsi-pci,id=scsi0,disable-legacy=on,iommu_platform=on
   -drive file=${vm_qcow2_path},if=none,id=drive.0
   -device scsi-hd,bus=scsi0.0,id=scsi-hd.0,drive=drive.0"
  }

  case "${hygon_cctype}" in
  "csv"|"csv1")
    qemu_csv_policy="0x1"
    ;;
  "csv2")
    qemu_csv_policy="0x5"
    ;;
  "csv3")
    qemu_csv_policy="0x45"
    ;;
  *)
    usage ; exit 1
    ;;
  esac
  [ -n "${godh_cert_path}" ] && qemu_godh_cert=",dh-cert-file=${godh_cert_path}"
  [ -n "${session_path}" ] && qemu_session=",session-file=${session_path}"
  [ -n "${secret_path}" ] && qemu_secret=",secret-file=${secret_path}"
  [ -n "${secret_header_path}" ] && {
    qemu_secret_header=",secret-header-file=${secret_header_path}"
  }
  [ ${kernel_hashes_on} -eq 1 ] && qemu_kernel_hashes=",kernel-hashes=on"

  qemu_hygon_cc_cmd="
   -object sev-guest,id=sev0,cbitpos=47,reduced-phys-bits=5,policy=${qemu_csv_policy}${qemu_godh_cert}${qemu_session}${qemu_secret}${qemu_secret_header}${qemu_kernel_hashes}
   -machine memory-encryption=sev0"

  [ -n "${kernel_path}" ] && qemu_kernel_cmd=" -kernel ${kernel_path}"
  [ -n "${initrd_path}" ] && qemu_initrd_cmd=" -initrd ${initrd_path}"
  [ -n "${cmdline_path}" ] && qemu_cmdline_cmd=(-append "$(cat ${cmdline_path})")

  sudo ${qemu_kvm_bin} \
    -enable-kvm \
    -machine q35 \
    -cpu Dhyana-v1 \
    -smp 4 \
    -m 8G \
    ${qemu_ovmf_cmd} \
    ${qemu_kernel_cmd} \
    ${qemu_initrd_cmd} \
    "${qemu_cmdline_cmd[@]}" \
    ${qemu_vm_blk_dev_cmd} \
    ${qemu_hygon_cc_cmd} \
    -vnc 0.0.0.0:0,to=100
}

do_launch_vm
